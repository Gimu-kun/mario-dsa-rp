@page "/challenge/knap-sack/play/dynamic-board"
@model mario_dsa_rp.Namespace.DynamicBoardModel
@using System.Text.Json

@{
Layout = "_Layout";
ViewData["Title"] = "Dynamic Board";
var hh = Math.Floor((decimal)Model.challengeTimer / 3600);
var mm = Math.Floor((decimal)(Model.challengeTimer % 3600) / 60);
var ss = Model.challengeTimer % 60;
}

<link rel="stylesheet" href="~/css/dynamic-board.style.css">

<style>
    .hidden { display: none !important; }
</style>

<div class="play-page">
    <!-- ROOM -->
    <div id="room_container" class="@(Model.Mode == "single" ? "hidden" : "")">
        <div class="container py-5">
            <h2 class="mb-4 text-center">Ph√≤ng ch∆°i 2 ng∆∞·ªùi</h2>
            <div class="card shadow-sm p-4">
                <p><strong>M√£ ph√≤ng:</strong> <span id="roomIdDisplay">@Model.roomId ?? "-"</span></p>
                <p><strong>ƒê·ªô kh√≥:</strong> <span>@Model.Difficult</span></p>

                <h5>Danh s√°ch ng∆∞·ªùi ch∆°i</h5>
                <ul id="playerList" class="list-group mb-3"></ul>

                <div class="d-flex gap-2">
                    <button id="copyLinkBtn" type="button" class="btn btn-outline-primary">üìã Copy Link M·ªùi</button>
                    <button id="startGameBtn" type="button" class="btn btn-success" disabled>B·∫Øt ƒë·∫ßu tr√≤ ch∆°i</button>
                </div>
            </div>
        </div>
    </div>

    <!-- GAME -->
    <div id="game-container" class="@(Model.Mode == "single" ? "" : "hidden")">
        <!-- (ph·∫ßn game nh∆∞ b·∫°n ƒë√£ c√≥) -->
        <div class="score-box">
            <p class="text-xl font-bold text-success">S·ªë ƒëi·ªÉm hi·ªán t·∫°i: <span id="live-score">1000</span> ƒëi·ªÉm</p>
        </div>

        <div id="congrats-message" class="congrats-overlay">
            <h2 class="congrats-text">üéâ Ch√∫c m·ª´ngÔºÅ üéâ</h2>
            <p class="congrats-sub">B·∫°n ƒë√£ ho√†n th√†nh th·ª≠ th√°ch th√†nh c√¥ng!</p>
        </div>

        <div class="question">
            <div class="question_decor left"></div>
            <p class="question_txt title">C√πng nhau l·∫≠p b·∫£ng quy ho·∫°ch ƒë·ªông nh√© !</p>
            <div class="question_decor right"></div>
        </div>

        <div class="grid auto-cols-max grid-flow-col gap-5 text-center">
            <div class="bg-neutral rounded-box text-neutral-content flex flex-col p-2">
                <span class="countdown font-mono text-5xl">
                    <span id="timer-hour" style="--value:@hh;" aria-live="polite">@hh</span>
                </span>
                Gi·ªù
            </div>
            <div class="bg-neutral rounded-box text-neutral-content flex flex-col p-2">
                <span class="countdown font-mono text-5xl">
                    <span id="timer-minute" style="--value:@mm;" aria-live="polite">@mm</span>
                </span>
                Ph√∫t
            </div>
            <div class="bg-neutral rounded-box text-neutral-content flex flex-col p-2">
                <span class="countdown font-mono text-5xl">
                    <span id="timer-second" style="--value:@ss;" aria-live="polite">@ss</span>
                </span>
                Gi√¢y
            </div>
        </div>

        <div class="question-content position-sticky top-5 left-5 z-3">
            <table class="item-table horizontal">
                <thead>
                <tr id="item-header"><th>V·∫≠t ph·∫©m</th></tr>
                </thead>
                <tbody>
                <tr id="item-weight-row"><td>Tr·ªçng l∆∞·ª£ng (w)</td></tr>
                <tr id="item-value-row"><td>Gi√° tr·ªã (v)</td></tr>
                </tbody>
                <tfoot>
                <tr><td id="capacity-cell" colspan="1"></td></tr>
                </tfoot>
            </table>
        </div>

        <div id="dp-board-game" class="playing-container z-1">
            <div class="dp-table-wrapper">
                <table id="dp-table" class="dp-table" style="--col-count: 20">
                    <thead><tr id="dp-header"><th style="min-width:200px">V·∫≠t Ph·∫©m\S·ª©c ch·ª©a</th></tr></thead>
                    <tbody id="dp-body"></tbody>
                </table>
            </div>
        </div>

        <div id="choose-item-game" class="playing-container container">
            <div class="row gy-5 m-5"></div>
            <div class="knapsack-container mt-5 text-center">
                <div id="knapsack" class="knapsack-img" ondrop="dropItem(event)" ondragover="allowDrop(event)">
                    <img src="~/assets/mario_hat.png" alt="Bag" id="bag-image"/>
                </div>
                <p class="mt-3">
                    ‚öñÔ∏è Tr·ªçng l∆∞·ª£ng hi·ªán t·∫°i: <span id="bag-weight">0</span><br/>
                    üí∞ Gi√° tr·ªã hi·ªán t·∫°i: <span id="bag-value">0</span>
                </p>
                <div id="bag-warning" class="text-danger fw-bold"></div>
                <div class="mt-2">
                    <button id="return-last-btn" class="btn btn-sm btn-warning" onclick="returnLastItem()">‚Ü© Tr·∫£ 1 m√≥n</button>
                    <button id="return-all-btn" class="btn btn-sm btn-danger" onclick="returnAllItems()">üóë Tr·∫£ t·∫•t c·∫£</button>
                </div>
            </div>
        </div>

        <div class="btn-container" id="result-buttons"></div>
    </div>
</div>

@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    // s·ª≠ d·ª•ng JsonSerializer ƒë·ªÉ nh√∫ng string an to√†n v√†o JS
    const mode = @Html.Raw(JsonSerializer.Serialize(Model.Mode));
    const roomIdFromServer = @Html.Raw(JsonSerializer.Serialize(Model.roomId)); // c√≥ th·ªÉ null
    const challengeId = @Html.Raw(JsonSerializer.Serialize(Model.Id));       // ƒë√¢y l√† challenge id (ƒë·ªÅ)
    const difficult = @Html.Raw(JsonSerializer.Serialize(Model.Difficult));
    let userId = @Html.Raw(JsonSerializer.Serialize(Model.UserId));
    let username = @Html.Raw(JsonSerializer.Serialize(Model.FullName));
    let isFinished = false;
    let stage = "dp";
    let answer;
    let dpBoard;
    let dpBoardWithMiss;
    
    // fallback n·∫øu roomId kh√¥ng c√≥ ·ªü server (l·∫•y t·ª´ querystring)
    let roomId = roomIdFromServer || (new URLSearchParams(window.location.search)).get("roomId") || "";
    let currentHostId;
    
    if (!userId) userId = "guest-" + Math.floor(Math.random() * 10000);
    if (!username) username = "Kh√°ch " + Math.floor(Math.random() * 1000);

    let connection = null;

    // ====== Kh·ªüi t·∫°o danh s√°ch answer DP ======
    function initAnswerList(dp){
        let answer = [];
        for (let i = 0; i < dp.length; i++) {
            for (let j = 0; j < dp[i].length; j++) {
                if (dp[i][j] === -1){
                    answer.push({ x:i, y:j, v:0 });
                }
            }
        }
        return answer;
    }

    // ----- SignalR + room logic -----
    async function startRoom() {
        connection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost:5119/roomhub")
            .build();

        // Player list update
        connection.on("PlayerListUpdated", (players, hostId) => {
            currentHostId = hostId;
            const list = document.getElementById("playerList");
            list.innerHTML = "";
            players.forEach(p => addUserToList(p.userId, p.username));
            console.log(players);
            const startBtn = document.getElementById("startGameBtn");
            if (userId === hostId) {
                startBtn.disabled = players.length < 2;
                startBtn.style.display = "inline-block";
            } else {
                startBtn.style.display = "none";
            }
        });

        // When server starts game -> show game UI
        connection.on("GameStarted", (players) => {
            localStorage.setItem("players", JSON.stringify(players));
            
            document.getElementById("room_container").classList.add("hidden");
            document.getElementById("game-container").classList.remove("hidden");

            // host s·∫Ω generate v√† chia s·∫ª challenge; non-host s·∫Ω ch·ªù event ChallengeGenerated
            const host = players.find(p => p.userId === currentHostId);
            if (host && host.userId === userId) {
                getChallenge();
            }
        });

        // Khi host share challenge t·ªõi c√°c client
        connection.on("ChallengeGenerated", (challengeResponse) => {
            console.log("üì• Nh·∫≠n ƒë·ªÅ b√†i t·ª´ host (SignalR):", challengeResponse);
            answer = initAnswerList(challengeResponse.dpBoardWithMiss);
            dpBoard = challengeResponse.dpBoard;
            dpBoardWithMiss = challengeResponse.dpBoardWithMiss;
            localStorage.setItem("challenge", JSON.stringify(challengeResponse));
            // t√πy structure response: n·∫øu b·∫°n tr·∫£ { challenge: { ... } } th√¨ d√πng .challenge
            console.log(challengeResponse);
            const payload = challengeResponse.challenge ?? challengeResponse;
            buildTemplate(payload);
        });

        //Khi thay ƒë·ªïi ƒë√°p √°n th√¨ ƒë·ªìng b·ªô v·ªõi nh·ªØng ng∆∞·ªùi trong ph√≤ng
        connection.on("CellAnswered", (payload) => {
            console.log("üì• CellAnswered t·ª´ player kh√°c:", payload);
            applyCellAnswer(payload.x, payload.y, payload.v);
        });

        await connection.start();
        console.log("‚úÖ SignalR connected");

        // G·ªçi JoinRoom v·ªõi roomId (ph·∫£i c√≥ roomId cho multiplay)
        if (!roomId) {
            console.warn("roomId tr·ªëng khi JoinRoom; ki·ªÉm tra querystring ho·∫∑c server truy·ªÅn roomId.");
        }
        await connection.invoke("JoinRoom", roomId, userId, username);
    }

    // n·∫øu l√† multiplay th√¨ startRoom(); single th√¨ hi·ªán th·∫≥ng game v√† g·ªçi getChallenge
    if (mode === "multiplay") {
        startRoom();
    } else if (mode === "single") {
        document.getElementById("room_container")?.classList.add("hidden");
        document.getElementById("game-container")?.classList.remove("hidden");
        // n·∫øu b·∫°n mu·ªën l·∫•y challenge t·ª´ server theo challengeId
        getChallenge();
    }

    document.getElementById("copyLinkBtn")?.addEventListener("click", () => {
        const link = `${location.origin}/challenge/knap-sack/play/dynamic-board?roomId=${roomId}&difficult=${difficult}&mode=multiplay`;
        navigator.clipboard.writeText(link).then(() => alert("ƒê√£ copy link m·ªùi!"));
    });

    document.getElementById("startGameBtn")?.addEventListener("click", async (e) => {
        e.preventDefault();
        if (!connection) return alert("Ch∆∞a k·∫øt n·ªëi room.");
        await connection.invoke("StartGame", roomId, userId);
    });

    function addUserToList(uId, uName) {
        const list = document.getElementById("playerList");
        const li = document.createElement("li");
        li.classList.add("list-group-item");
        li.textContent = `${uName} (${uId})`;
        list.appendChild(li);
    }

    // ===== Challenge generation / build =====
    let challenge = null;

    async function getChallenge() {
        try {
            // playerList cho server (single: ch·ªâ m√¨nh; multiplay: l·∫•y t·ª´ localStorage players)
            let playerList = [];
            if (mode === "single") {
                playerList = [userId];
            } else {
                const storedPlayers = localStorage.getItem("players");
                playerList = storedPlayers ? JSON.parse(storedPlayers).map(p => p.userId) : [];
            }

            // IMPORTANT: id query param = challengeId (ƒë·ªÅ). Kh√¥ng d√πng roomId ·ªü ƒë√¢y.
            const response = await fetch(
                `http://localhost:5119/api/challenge/generate?type=dp_board&difficulty=${encodeURIComponent(difficult)}&mode=${encodeURIComponent(mode)}&id=${encodeURIComponent(challengeId)}`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(playerList)
                }
            );

            if (!response.ok) throw new Error("‚ùå L·ªói khi g·ªçi API: " + response.statusText);

            const challengeResponse = await response.json();
            console.log("üì• Challenge nh·∫≠n ƒë∆∞·ª£c (API):", challengeResponse);

            localStorage.setItem("challenge", JSON.stringify(challengeResponse));

            // Host chia s·∫ª cho player kh√°c (qua roomId)
            if (mode === "multiplay" && connection) {
                console.log("challengeResponse multiple",challengeResponse);
                await connection.invoke("ShareChallenge", roomId, challengeResponse.challenge);
            }

            // L·∫•y payload th·ª±c t·∫ø (t√πy structure API)
            challenge = challengeResponse.challenge ?? challengeResponse;
            buildTemplate(challenge);

        } catch (err) {
            console.error("üö® L·ªói khi getChallenge:", err);
        }
    }

    // build DOM t·ª´ challenge (items, dp board, cubes)
    function buildTemplate(ch) {
        if (!ch) return;
        const headerRow = document.getElementById("item-header");
        const weightRow = document.getElementById("item-weight-row");
        const valueRow = document.getElementById("item-value-row");
        const capacityCell = document.getElementById("capacity-cell");

        headerRow.innerHTML = "<th>V·∫≠t ph·∫©m</th>";
        weightRow.innerHTML = "<td>Tr·ªçng l∆∞·ª£ng (w)</td>";
        valueRow.innerHTML = "<td>Gi√° tr·ªã (v)</td>";

        (ch.quesData || []).forEach((item, idx) => {
            headerRow.innerHTML += `<th>${idx + 1}</th>`;
            weightRow.innerHTML += `<td>${item.weight}</td>`;
            valueRow.innerHTML += `<td>${item.value}</td>`;
        });

        capacityCell.setAttribute("colspan", (ch.quesData?.length || 0) + 1);
        capacityCell.innerText = "S·ª©c ch·ª©a : " + (ch.maxCapacity ?? "-");

        // DP header & body
        const dpHeader = document.getElementById("dp-header");
        const dpBody = document.getElementById("dp-body");
        dpHeader.innerHTML = `<th style="min-width:200px">V·∫≠t ph·∫©m \\ S·ª©c ch·ª©a</th>`;
        for (let w = 0; w <= (ch.maxCapacity || 0); w++) {
            dpHeader.innerHTML += `<th>${w}</th>`;
        }

        dpBody.innerHTML = "";
        for (let i = 0; i <= (ch.quesData?.length || 0); i++) {
            let rowHtml = `<tr><td>${i}</td>`;
            for (let w = 0; w <= (ch.maxCapacity || 0); w++) {
                const isMissing = (ch.dpBoardWithMiss && ch.dpBoardWithMiss[i] && ch.dpBoardWithMiss[i][w] === -1);
                const trueValue = ch.dpBoard && ch.dpBoard[i] ? ch.dpBoard[i][w] : "";
                const cellId = `dp-${i}-${w}`;

                if (isMissing) {
                    rowHtml += `
                        <td id="${cellId}" class="dp-cell">
                            <input type="number" class="dp-input-field" onchange="answerChange(${i}, ${w}, event)"/>
                        </td>`;
                } else {
                    rowHtml += `
                        <td id="${cellId}" class="dp-cell hidden-cell" data-value="${trueValue}">
                            ${trueValue}
                        </td>`;
                }
            }
            rowHtml += "</tr>";
            dpBody.innerHTML += rowHtml;
        }

        // Cube items
        const cubeContainer = document.querySelector("#choose-item-game .row");
        cubeContainer.innerHTML = "";
        (ch.quesData || []).forEach(item => {
            cubeContainer.innerHTML += `
                <div class="col-2 d-flex justify-content-center">
                    <div class="cube"
                         id="cube-${item.id}"
                         draggable="true"
                         ondragstart="dragItem(event)"
                         data-weight="${item.weight}"
                         data-value="${item.value}">
                        <div class="face front">
                            <div class="item-info text-center">
                                <span class="item-value">üí∞ ${item.value}</span>
                                <span class="item-weight">‚öñÔ∏è ${item.weight}</span>
                            </div>
                        </div>
                        <div class="face back"></div>
                        <div class="face right"></div>
                        <div class="face left"></div>
                        <div class="face top"></div>
                        <div class="face bottom"></div>
                    </div>
                </div>`;
        });
    }

    // ====== DP BOARD ======
    function answerChange(x, y, e) {
        if (isFinished || stage !== "dp") return;
        const val = parseInt(e.target.value, 10) || 0;
        const existing = answer.find(a => a.x === x && a.y === y);
        if (existing) existing.v = val;
        else answer.push({ x, y, v: val });

        if (val === dpBoard[x][y]) {
            const cell = document.getElementById(`dp-${x}-${y}`);
            cell.innerHTML = `<span class="dp-input-field correct">${val} ‚úÖ</span>`;
            revealAllHiddenCellsWithValue(val);
        }

        // üîë check xem t·∫•t c·∫£ ƒë√£ ƒë√∫ng ch∆∞a
        const allCorrect = answer.every(a => a.v === dpBoard[a.x][a.y]);
        if (allCorrect) {
            unlockItemStage();
        }

        // üîπ G·ª≠i SignalR cho c√°c player kh√°c
        if (mode === "multiplay" && connection) {
            connection.invoke("SendCellAnswer", roomId, {
                x: x,
                y: y,
                v: val,
                userId: userId
            });
        }
    }

    //H√†m c·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi t·ª´ ng∆∞·ªùi ch∆°i kh√°c
    function applyCellAnswer(x, y, val) {
        // n·∫øu √¥ ch∆∞a c√≥ th√¨ t√¨m v√† ƒëi·ªÅn
        const cell = document.getElementById(`dp-${x}-${y}`);
        if (!cell) return;

        // n·∫øu gi√° tr·ªã ƒë√∫ng
        if (val === dpBoard[x][y]) {
            cell.innerHTML = `<span class="dp-input-field correct">${val} ‚úÖ</span>`;
            revealAllHiddenCellsWithValue(val);
        }
    }


    function revealAllHiddenCellsWithValue(value) {
        for (let i = 0; i < dpBoard.length; i++) {
            for (let j = 0; j < dpBoard[i].length; j++) {
                if (dpBoard[i][j] === value && dpBoardWithMiss[i][j] !== -1) {
                    const cell = document.getElementById(`dp-${i}-${j}`);
                    if (cell && cell.classList.contains("hidden-cell")) {
                        cell.classList.remove("hidden-cell");
                        cell.classList.add("revealed");
                        cell.textContent = value;
                    }
                }
            }
        }
    }
    
    function revealAllHiddenCells() {
        for (let i = 0; i < dpBoard.length; i++) {
            for (let j = 0; j < dpBoard[i].length; j++) {
                if (dpBoardWithMiss[i][j] !== -1) {
                    const cell = document.getElementById(`dp-${i}-${j}`);
                    if (cell && cell.classList.contains("hidden-cell")) {
                        cell.classList.remove("hidden-cell");
                        cell.classList.add("revealed");
                        cell.textContent = dpBoard[i][j];
                    }
                }
            }
        }
    }

    // ====== Khi DP xong ‚Üí m·ªü item game ======
    function unlockItemStage() {
        stage = "items";
        revealAllHiddenCells();
        document.getElementById("choose-item-game").style.display = "block";
    }
</script>
}
